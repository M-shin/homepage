// c is the 
var c = document.getElementById('c');
c.height = document.body.clientHeight;
c.width = document.body.clientWidth;
var ctx = c.getContext('2d');
var intervalId = -1;
var speed = 300;
var running = false;
var dragging = false;
var currentColor = 0;
var raving = false;
var boxSize = 10;
var bgcolor = "#000000";
var gridcolor = "#FFFFFF";
var colors = ["#FF0000", "#00FF00", "#0000FF", "#F6FF00", "#FF00FF", "#00FFFF", "#FFFFFF", "#89918B"];
var grids = false;
var hueDifferential = 70;
var currentCoor = {
	_cx: -1,
	_cy: -1
};

function Cell(x, y) {
	this.cx = x;
	this.cy = y;
}
var activeCells = new Array();
var downCells = new Array();
var upCells = new Array();

var array = new Array(Math.ceil(screen.width * 3 / boxSize));
for (var x = 0; x < array.length; x++) {
	array[x] = new Array(Math.ceil(screen.height * 3 / boxSize));
	for (var y = 0; y < array[x].length; y++) {
		array[x][y] = false;
	}
}
var startX = Math.ceil(array.length / 3);
var startY = Math.ceil(array[0].length / 3);
var endX = startX * 2 - 1;
var endY = startY * 2 - 1;
for (var x = startX; x <= endX; x++) {
	for (var y = startY; y <= endY; y++) {
		ctx.fillStyle = bgcolor;
		ctx.fillRect((x - startX) * boxSize, (y - startY) * boxSize, boxSize, boxSize);
		//	ctx.strokeRect((x-startX)*boxSize,(y-startY)*boxSize,boxSize,boxSize);
	}
}
$("#c").mousedown(function (e) {
	dragging = true;
	var _x = Math.floor((e.pageX) / boxSize) + startX;
	var _y = Math.floor((e.pageY) / boxSize) + startY;
	flip(_x, _y);
	currentCoor._cx = _x;
	currentCoor._cy = _y;
}).mouseup(function (e) {
	dragging = false;
	dumpToActive();

}).mousemove(function (e) {
	if (dragging === true) {
		var _x = Math.floor((e.pageX) / boxSize) + startX;
		var _y = Math.floor((e.pageY) / boxSize) + startY;
		if (!(currentCoor._cx == (_x) && currentCoor._cy == (_y))) {
			flip(_x, _y);
			currentCoor._cx = _x;
			currentCoor._cy = _y;
		}
	}
});

function flipObject(o) {
	flip(o._x, o._y);
}

function checkAC(_x, _y) {
	for (var i = 0; i < activeCells.length; i++) {
		if (activeCells[i].cx === _x && activeCells[i].cy === _y) {
			return i;
		}
	}
	return -1;
}

function flip(x, y) {
	array[x][y] = !array[x][y];
	if (array[x][y] === true) {
		upCells.push(new Cell(x, y));
		upCells.push(new Cell(x + 1, y + 1));
		upCells.push(new Cell(x + 1, y));
		upCells.push(new Cell(x + 1, y - 1));
		upCells.push(new Cell(x, y + 1));
		upCells.push(new Cell(x, y - 1));
		upCells.push(new Cell(x - 1, y + 1));
		upCells.push(new Cell(x - 1, y));
		upCells.push(new Cell(x - 1, y - 1));
	} else if (array[x][y] === false) {
		downCells.push(new Cell(x, y));
		downCells.push(new Cell(x + 1, y + 1));
		downCells.push(new Cell(x + 1, y));
		downCells.push(new Cell(x + 1, y - 1));
		downCells.push(new Cell(x, y + 1));
		downCells.push(new Cell(x, y - 1));
		downCells.push(new Cell(x - 1, y + 1));
		downCells.push(new Cell(x - 1, y));
		downCells.push(new Cell(x - 1, y - 1));
	}
	sanitizeCells();
	if (x >= startX && x <= endX && y >= startY && y <= endY) {
		if (array[x][y] === true) {
			ctx.fillStyle = colors[currentColor];
			if (raving === true) {
				ctx.fillStyle = randomColor();
			}
		} else {
			ctx.fillStyle = bgcolor;
		}
		x -= startX;
		y -= startY;
		ctx.fillRect(x * boxSize, y * boxSize, boxSize, boxSize);
		ctx.strokeRect(x * boxSize, y * boxSize, boxSize, boxSize);
	}
}

function sanitizeCells() {
	for (var i = 0; i < upCells.length; i++) {
		if (upCells[i].cx < 0 || upCells[i].cy < 0) {
			upCells.splice(i, 1);
		}
	}
	for (var i = 0; i < downCells.length; i++) {
		if (downCells[i].cx < 0 || downCells[i].cy < 0) {
			downCells.splice(i, 1);
		}
	}
}
$(document).keydown(function (e) {
	console.log(e.keyCode);
	var pause = 80;
	var speedUp = 38;
	var speedDown = 40;
	var step = 32;
	var save = 83;
	var load = 76;
	var random = 82;
	var clear = 67;
	var colorChange = [49, 50, 51, 52, 53, 54, 55, 56]
	var randColor = 48;
	var raveMode = 57;
	var gridLines = 71;

	if (e.keyCode == pause) {
		running = !running;
	}
	if (e.keyCode == speedUp) {
		speed *= .8;
	}
	if (e.keyCode == speedDown) {
		speed *= 1.2;
	}
	if (e.keyCode == step) {
		tick();
	}
	if (e.keyCode == random) {
		generateRandom();
	}
	if (e.keyCode == clear) {
		clearLife();
	}
	for (var i = 0; i < colorChange.length; i++) {
		if (e.keyCode == colorChange[i]) {
			currentColor = i;
			raving = false;
			update();
		}
	}
	if (e.keyCode == randColor) {
		colors[colors.length - 1] = randomColor();
		currentColor = colors.length - 1;
		raving = false;
		update();
	}
	if (e.keyCode == save) {
		localStorage.data = JSON.stringify(array);
	}
	if (e.keyCode == load) {
		console.log("Loading");
		array = JSON.parse(localStorage.data);
		update();
	}
	if (e.keyCode == raveMode) {
		raving = !raving;
		update();
	}
	if (e.keyCode == gridLines) {
		grids = !grids;
	}
});

function checkBodySize() {
	if (c.height != document.body.clientHeight || c.width != document.body.clientWidth) {
		c.height = document.body.clientHeight;
		c.width = document.body.clientWidth;
		update();
	}
}
window.setInterval("checkBodySize()", 10);

function gameLoop() {
	if (running) {
		tick();
	}

	window.setTimeout("gameLoop()", speed);
}


function clearLife() {
	for (var i = 0; i < activeCells.length; i++) {
		if (array[activeCells[i].cx][activeCells[i].cy] === true) {
			flip(activeCells[i].cx, activeCells[i].cy);
		}
	}
	dumpToActive();
}

function generateRandom() {
	var total = (endX + 1 - startX) * (endY + 1 - startY);
	var amt = Math.floor(Math.random() * total / 2);
	//console.log("a: " + amt);

	for (var i = 0; i < amt; i++) {
		var _x = Math.floor(Math.random() * (endX + 1 - startX)) + startX;
		var _y = Math.floor(Math.random() * (endY + 1 - startY)) + startY;
		//console.log(_x + " " + _y);
		flip(_x, _y);
	}

	dumpToActive();
}

function dumpToActive() {
	for (var i = 0; i < downCells.length; i++) {
		var index = checkAC(downCells[i].cx, downCells[i].cy);
		if (index >= 0 && array[downCells[i].cx][downCells[i].cy] === false) {
			activeCells.splice(index, 1);
		}

	}


	for (var i = 0; i < activeCells.length; i++) {
		var c = activeCells[i];
		if (array[c.cx][c.cy] === true) {
			upCells.push(new Cell(c.cx, c.cy));
			upCells.push(new Cell(c.cx + 1, c.cy + 1));
			upCells.push(new Cell(c.cx + 1, c.cy));
			upCells.push(new Cell(c.cx + 1, c.cy - 1));
			upCells.push(new Cell(c.cx, c.cy + 1));
			upCells.push(new Cell(c.cx, c.cy - 1));
			upCells.push(new Cell(c.cx - 1, c.cy + 1));
			upCells.push(new Cell(c.cx - 1, c.cy));
			upCells.push(new Cell(c.cx - 1, c.cy - 1));
		}
	}
	for (var i = 0; i < upCells.length; i++) {
		var index = checkAC(upCells[i].cx, upCells[i].cy);
		if (index === -1) {
			//console.log("upcell adding: " + upCells[i].cx + " " + upCells[i].cy);
			activeCells.push(new Cell(upCells[i].cx, upCells[i].cy));
		}
	}

	downCells = new Array();
	upCells = new Array();
}

function tick() {
	var cc = new Array();
	var index = 0;
	for (var i = 0; i < activeCells.length; i++) {
		var x = activeCells[i].cx;
		var y = activeCells[i].cy;
		var n = numNeighbors(x, y);
		if ((array[x][y] && (n <= 1 || n >= 4)) || (!array[x][y] && (n == 3))) {
			cc.push({
				xc: x,
				yc: y
			});
		}
	}
	for (var x = 0; x < cc.length; x++) {
		//console.log(cc[x].xc + " " + cc[x].yc + " these are being flipped");
		flip(cc[x].xc, cc[x].yc);
	}
	dumpToActive();
	if (grids === true) {
		if (raving === true) {
			ctx.strokeStyle = randomColor();
		} else {
			ctx.strokeStyle = negativeColor(colors[currentColor]);
		}
		update();
	} else {
		ctx.strokeStyle = bgcolor;
	}
}

function pad(str, len, replace) {
	var pad_char = typeof replace !== 'undefined' ? replace : '0';
	var pad = new Array(1 + len).join(pad_char);
	return (pad + str).slice(-pad.length);
}

function negativeColor(c) {
	if (c.charAt(0) == "#") {
		c = c.substring(1);
	}
	var r = 255 - parseInt(c.substring(0, 2), 16);
	var g = 255 - parseInt(c.substring(2, 4), 16);
	var b = 255 - parseInt(c.substring(4, 6), 16);

	return "#" + (pad(r.toString(16), 2) + pad(g.toString(16), 2) + pad(b.toString(16), 2)).toUpperCase();
}

function randomColor() {
	var r = Math.floor(Math.random() * (256 - hueDifferential)) + hueDifferential;
	var g = Math.floor(Math.random() * (256 - hueDifferential)) + hueDifferential;
	var b = Math.floor(Math.random() * (256 - hueDifferential)) + hueDifferential;
	return "#" + (pad(r.toString(16), 2) + pad(g.toString(16), 2) + pad(b.toString(16), 2)).toUpperCase();
}

function numNeighbors(x, y) {
	var n = 0;
	if (x > 0 && y > 0 && array[x - 1][y - 1]) {
		n++;
	}
	if (x > 0 && array[x - 1][y]) {
		n++;
	}
	if (x > 0 && y < array[x].length - 1 && array[x - 1][y + 1]) {
		n++;
	}
	if (y < array[x].length - 1 && array[x][y + 1]) {
		n++;
	}
	if (x < array.length - 1 && y < array[x].length - 1 && array[x + 1][y + 1]) {
		n++;
	}
	if (x < array.length - 1 && array[x + 1][y]) {
		n++;
	}
	if (x < array.length - 1 && y > 0 && array[x + 1][y - 1]) {
		n++;
	}
	if (y > 0 && array[x][y - 1]) {
		n++;
	}
	return n;
}
$(window).resize(update());

function update() {
	for (var x = startX; x <= endX; x++) {
		for (var y = startY; y <= endY; y++) {
			if (array[x][y] === true) {
				if (raving === true) {
					ctx.fillStyle = randomColor();
				} else {
					ctx.fillStyle = colors[currentColor];
				}
			} else {
				ctx.fillStyle = bgcolor;
			}
			ctx.fillRect((x - startX) * boxSize, (y - startY) * boxSize, boxSize, boxSize);
			ctx.strokeRect((x - startX) * boxSize, (y - startY) * boxSize, boxSize, boxSize);
		}
	}
	//Send to active Cells
}

gameLoop();
